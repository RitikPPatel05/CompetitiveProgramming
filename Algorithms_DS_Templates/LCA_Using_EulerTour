/**
 * Description: Finds LCA between two nodes in a tree in O(logN).
 * Can be used to find distance/xor/addition/gcd/lcm/ OR / Any cumulative property between two nodes.
 * If updations are reqd: we can use segment tree of nodes maintaining prefix array from root as nodes.
 * Query Time: O(logN)
 * Space:  O(NlogN)
 * Build Time: O(NlogN)
 * 0-Indexing.
 */

template<int size>
class LCA_EULER_TOUR {
    private:
        int LG = 32 - __builtin_clz(size);

        void lca_dfs(int v, int p, int lvl) {
            in[v] = timer++;
            euler_order[in[v]] = v;
            par[0][v] = p;
            level[v] = lvl;

            for (int i = 1; i < LG; ++i) {
                if (par[i][v] == -1) continue;
                par[i][v] = par[i - 1][par[i - 1][v]];
            }

            for (auto &to: edges[v]) {
                if (to == p) continue;
                dfS(to, v, lvl + 1);
            }

            out[v] = timer - 1;
        }


    public:
        int par[LG][size];
        int in[size], out[size], level[size];
        vector<int> edges[size];
        vector<int> euler_order(size);
        int timer;

        void init(root) {
            timer = 0;
            memset(par, -1, sizeof(par));
            lca_dfs(root, -1, 0);
        }

        void add_edge(int u, int v) {
            edges[u].push_back(v);
            edges[v].push_back(u);
        }

        int get_kth_ancestor(int v, int k) {
            for (int i = LG - 1; i >= 0; --i) 
                if ( k & (1<<i) )
                    v = par[i][v];
            
            return v;
        }

        int LCA(int u, int v) {
            if (depth[a] < depth[b]) swap(a, b);
            int d = depth[a] - depth[b];
            a =  get_kth_ancestor(a, d);
            if (a == b) {
                return v;
            } else {
                for (int i = LG - 1; i >= 0; --i) {
                    if (par[i][u] != -1 && par[i][u] != par[i][v]) {
                        u = par[i][u];
                        v = par[i][v];
                    }
                }
                return par[0][u];
            }
        }

        /* Query Part */
        int dist(int u, int v) {
            int res = level[u] + level[v] - 2 * level[LCA(u, v)];
            return res;
        }
};

/* 
Problem(Finding Closest ancestor of a specific color): http://www.usaco.org/index.php?page=viewproblem2&cpid=970
Solution: https://ideone.com/VPEZXn
*/
