/**
 * Description: Finds LCA between two nodes in a tree in O(logN).
 * Can be used to find distance/xor/min/max/addition/gcd/lcm/ OR / Any cumulative property between two nodes.
 * If updations are reqd: we can use segment tree of nodes maintaining prefix array from root as nodes.
 * Query Time: O(logN)
 * Space:  O(NlogN)
 * Build Time: O(NlogN)
 * 1-Indexing.
 */

const int MAXN = 1e5 + 5;
const int LG = log2(MAXN);
int timer = 0, n;
int parent[LG][MAXN];
int tin[MAXN], tout[MAXN], level[MAXN];
vector<int> g[MAXN], euler_order(MAXN);

// Used in problems for finding closest ancestor of a specific color.
// stack<int> stck; 
// vector<pair<int, int>> CUR:

void dfs(int v, int par, int lvl) {
	tin[v] = timer++;
	parent[0][v] = par;
	level[v] = lvl;
	euler_order[tin[v]] = v;
	
	// Activate only for closest ancestor.
	// stck.push(v);
	// CUR.push_back({tin[v], v});
	for (auto &to: g[v]) {
		if (to == par) continue;
		dfs(to, v, lvl + 1);
	}
	tout[v] = timer - 1;
	
	// stck.pop();
	// CUR.push_back({timer, stck.empty() ? 0 : stck.top() });
}

int walk(int u, int h) {
	for (int i = LG - 1; i >= 0; --i)
		if ((h>>i) & 1)
			u = parent[i][u];
	
	return u;
}

void precompute() {
	for (int i = 1; i < LG; ++i)
		for (int j = 1; j <= n; ++j)
			if (parent[i-1][j])
				parent[i][j] = parent[i-1][parent[i-1][j]];
}

int LCA(int u, int v) {

	if (level[u] < level[v]) swap(u,v);
	int diff = level[u] - level[v];
	u = walk(u, diff);
	
	if (u == v) return u;

	for (int i = LG - 1; i >= 0; --i) {
		if (parent[i][u] && parent[i][u] != parent[i][v]) {
			u = parent[i][u];
			v = parent[i][v];
		}
	}
	return parent[0][u];
}

int dist(int u, int v) {
	return level[u] + level[v] - 2 * level[LCA(u, v)];
}

void preProcessLCA(int root) {
    dfs(root, -1, 0);
    precompute();
}

/* 
Problem(Finding Closest ancestor of a specific color): http://www.usaco.org/index.php?page=viewproblem2&cpid=970
Solution: https://ideone.com/VPEZXn
*/
